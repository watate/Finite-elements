classdef FEMGui_2 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                        matlab.ui.Figure
        aEditFieldLabel                 matlab.ui.control.Label
        a                               matlab.ui.control.NumericEditField
        bEditFieldLabel                 matlab.ui.control.Label
        b                               matlab.ui.control.NumericEditField
        cEditFieldLabel                 matlab.ui.control.Label
        c                               matlab.ui.control.NumericEditField
        dEditFieldLabel                 matlab.ui.control.Label
        d                               matlab.ui.control.NumericEditField
        ElementTypeDropDownLabel        matlab.ui.control.Label
        ElementType                     matlab.ui.control.DropDown
        MeshCriteriaLabel               matlab.ui.control.Label
        Button                          matlab.ui.control.Button
        eEditFieldLabel                 matlab.ui.control.Label
        e                               matlab.ui.control.NumericEditField
        UIAxes                          matlab.ui.control.UIAxes
        GenerateButton                  matlab.ui.control.Button
        ElementsEditFieldLabel          matlab.ui.control.Label
        Elements                        matlab.ui.control.NumericEditField
        NodesEditField_2Label           matlab.ui.control.Label
        Nodes                           matlab.ui.control.NumericEditField
        MeshRefinementSliderLabel       matlab.ui.control.Label
        MeshRefinementSlider            matlab.ui.control.Slider
        UIAxes_2                        matlab.ui.control.UIAxes
        Plot                            matlab.ui.control.Button
        ColorbarButtonGroup             matlab.ui.container.ButtonGroup
        Button_2                        matlab.ui.control.ToggleButton
        Button_3                        matlab.ui.control.ToggleButton
        ConductivitykEditFieldLabel     matlab.ui.control.Label
        ConductivitykEditField          matlab.ui.control.NumericEditField
        PreProcessLabel                 matlab.ui.control.Label
        TemperatureMagnitudeEditFieldLabel  matlab.ui.control.Label
        TemperatureMagnitudeEditField   matlab.ui.control.NumericEditField
        Lamp                            matlab.ui.control.Lamp
        UIAxes_3                        matlab.ui.control.UIAxes
        PostProcessLabel                matlab.ui.control.Label
        ProcessLabel                    matlab.ui.control.Label
        DeformationTypeButtonGroup_2    matlab.ui.container.ButtonGroup
        HorizontalButton                matlab.ui.control.ToggleButton
        DiagonalButton                  matlab.ui.control.ToggleButton
        VerticalButton                  matlab.ui.control.ToggleButton
        Image                           matlab.ui.control.Image
        Image_2                         matlab.ui.control.Image
        Image_3                         matlab.ui.control.Image
        DropDown                        matlab.ui.control.DropDown
        ComputationTimesEditFieldLabel  matlab.ui.control.Label
        ComputationTimesEditField       matlab.ui.control.NumericEditField
        ResetButton                     matlab.ui.control.Button
        ResetButton_2                   matlab.ui.control.Button
        ResetButton_3                   matlab.ui.control.Button
        EdgeDisplaySwitchLabel          matlab.ui.control.Label
        Switch                          matlab.ui.control.Switch
    end

    
    properties (Access = public)
        didPlotHappen = 0; % Description
        plotType = 'Horizontal';
        edgeSwitch = 0;
    end
    
    
    methods (Access = public)
        
        function plot_it(app, X_1, Y_1, T, flux_x, flux_y)
            
            if(app.Switch.Value == '1')
                switch app.plotType
                    case 'Temperature'
                        patch(app.UIAxes_2, X_1,Y_1,T,'FaceColor','interp');
                        colormap(app.UIAxes_2, 'jet');
                        colorbar(app.UIAxes_2);
                        xlabel(app.UIAxes_2, 'X Coordinates');
                        ylabel(app.UIAxes_2, 'Y Coordinates');
                        title(app.UIAxes_2, ['Temperature ']);
                        
                    case 'Flux X'
                        patch(app.UIAxes_2, X_1,Y_1,flux_x,'FaceColor','interp');
                        colormap(app.UIAxes_2, 'jet');
                        colorbar(app.UIAxes_2);
                        xlabel(app.UIAxes_2, 'X Coordinates');
                        ylabel(app.UIAxes_2, 'Y Coordinates');
                        title(app.UIAxes_2, ['Flux in X Direction']);
                        
                    case 'Flux Y'
                        patch(app.UIAxes_2, X_1,Y_1,flux_y,'FaceColor','interp');
                        colormap(app.UIAxes_2, 'jet');
                        colorbar(app.UIAxes_2);
                        xlabel(app.UIAxes_2, 'X Coordinates');
                        ylabel(app.UIAxes_2, 'Y Coordinates');
                        title(app.UIAxes_2, ['Flux in Y Direction']);
                end
            elseif(app.Switch.Value == '0')
                switch app.plotType
                    case 'Temperature'
                        patch(app.UIAxes_2, X_1,Y_1,T,'FaceColor','interp', 'EdgeColor', 'none');
                        colormap(app.UIAxes_2, 'jet');
                        colorbar(app.UIAxes_2);
                        xlabel(app.UIAxes_2, 'X Coordinates');
                        ylabel(app.UIAxes_2, 'Y Coordinates');
                        title(app.UIAxes_2, ['Temperature ']);
                        
                    case 'Flux X'
                        patch(app.UIAxes_2, X_1,Y_1,flux_x,'FaceColor','interp', 'EdgeColor', 'none');
                        colormap(app.UIAxes_2, 'jet');
                        colorbar(app.UIAxes_2);
                        xlabel(app.UIAxes_2, 'X Coordinates');
                        ylabel(app.UIAxes_2, 'Y Coordinates');
                        title(app.UIAxes_2, ['Flux in X Direction']);
                        
                    case 'Flux Y'
                        patch(app.UIAxes_2, X_1,Y_1,flux_y,'FaceColor','interp', 'EdgeColor', 'none');
                        colormap(app.UIAxes_2, 'jet');
                        colorbar(app.UIAxes_2);
                        xlabel(app.UIAxes_2, 'X Coordinates');
                        ylabel(app.UIAxes_2, 'Y Coordinates');
                        title(app.UIAxes_2, ['Flux in Y Direction']);
                end
            end
%             
        end
    end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: GenerateButton
        function GenerateButtonPushed(app, event)
            %Our mesh function code goes here
            %Note that the way the nodes are numbered here are different
            %(it goes in increasing order from left to right, bottom to
            %top
            %NL = [0 0; 1 0; 2 0; 0 1; 1 1; 2 1; 0 2; 1 2; 2 2]; %coordinates of our points
            %EL = [1 2 5 4; 2 3 6 5; 4 5 8 7; 5 6 9 8];
            app.UIAxes.cla;
            
            [NL, EL] = mesh_it(app.a.Value, app.b.Value, round(app.c.Value), round(app.d.Value), app.e.Value, app.ElementType.Value);
%             
%             if(app.ElementType.Value == "2DQU4N")
%                 [NL, EL] = mesh_2(app.a.Value, app.b.Value, app.c.Value, app.d.Value, app.e.Value);
%             elseif(app.ElementType.Value == "2DTR3N")
%                 [NL, EL] = mesh_mk_trig_2(app.a.Value, app.b.Value, app.c.Value, app.d.Value, app.e.Value);
%             end
%             
            NoN = size(NL, 1);
            NoE = size(EL, 1);
            NPE = size(EL, 2);
            
            for i = 1:NoE
                nl = EL(i, 1:NPE);
                for j = 1:NPE
                    x(j,i) = NL(nl(j), 1);
                    y(j,i) = NL(nl(j), 2);
                    
                end
            end
            
            z = zeros(size(x,1), size(x,2));
            
            patch(app.UIAxes, x, y, z, 'FaceColor', 'none');
            
            app.Elements.Value = NoE;
            app.Nodes.Value = NoN;
            
            
            save('EL.mat', 'EL');
            save('NL.mat', 'NL');
            save('x.mat', 'x');
            save('y.mat', 'y');
            
        end

        % Value changed function: MeshRefinementSlider
        function MeshRefinementSliderValueChanged(app, event)
            app.c.Value = app.MeshRefinementSlider.Value;
            app.d.Value = app.MeshRefinementSlider.Value;
            
            %Clear UIAxes
            app.UIAxes.cla;
            %app.UIAxes_2.cla;
            
            [NL, EL] = mesh_it(app.a.Value, app.b.Value, round(app.c.Value), round(app.d.Value), app.e.Value, app.ElementType.Value);
            
              
            NoN = size(NL, 1);
            NoE = size(EL, 1);
            NPE = size(EL, 2);
            
            for i = 1:NoE
                nl = EL(i, 1:NPE);
                for j = 1:NPE
                    x(j,i) = NL(nl(j), 1);
                    y(j,i) = NL(nl(j), 2);
                end
            end
            
            z = zeros(size(x,1), size(x,2));
            
            patch(app.UIAxes, x, y, z, 'FaceColor', 'none');
            
            app.Elements.Value = NoE;
            app.Nodes.Value = NoN;
% %             
%             
%             %%% This part does the mesh for the coloured graph
%             save('EL.mat', 'EL');
%             save('NL.mat', 'NL');
%             save('x.mat', 'x');
%             save('y.mat', 'y');
%             
%             PlotButtonPushed(app, event);

        end

        % Button pushed function: Plot
        function PlotButtonPushed(app, event)
            app.Lamp.Color = [0 1 0];
            
            app.didPlotHappen = 1;
%             load('EL.mat', 'EL');
%             load('NL.mat', 'NL');
%             load('x.mat', 'x');
%             load('y.mat', 'y');
%           
            [NL, EL] = mesh_it(app.a.Value, app.b.Value, round(app.c.Value), round(app.d.Value), app.e.Value, app.ElementType.Value);
            
              
            NoN = size(NL, 1);
            NoE = size(EL, 1);
            NPE = size(EL, 2);
            
            for i = 1:NoE
                nl = EL(i, 1:NPE);
                for j = 1:NPE
                    x(j,i) = NL(nl(j), 1);
                    y(j,i) = NL(nl(j), 2);
                end
            end
            
            z = zeros(size(x,1), size(x,2));
            
            patch(app.UIAxes, x, y, z, 'FaceColor', 'none');
            
            app.Elements.Value = NoE;
            app.Nodes.Value = NoN;

            
            app.UIAxes_2.cla;
            
            %initialize plotting variables
            NoN = size(NL, 1);
            NoE = size(EL, 1);
            NPE = size(EL, 2);
            BC_flag = app.DeformationTypeButtonGroup_2.SelectedObject.Text;
            T = app.TemperatureMagnitudeEditField.Value;
            k = app.ConductivitykEditField.Value;
            app.plotType = app.DropDown.Value;
            
            tic 
            [NL, EL, ENL] = FEM(NL, EL, BC_flag, T, k);
            
            [X_1, Y_1, T, flux_x, flux_y] = post_process(NL, EL, ENL);
            
            save('NL.mat', 'NL');
            save('EL.mat', 'EL');
            save('ENL.mat', 'ENL');
            save('X_1.mat', 'X_1');
            save('Y_1.mat', 'Y_1');
            save('T.mat', 'T');
            save('flux_x.mat', 'flux_x');
            save('flux_y.mat', 'flux_y');
            
            plot_it(app, X_1, Y_1, T, flux_x, flux_y);
            app.ComputationTimesEditField.Value=toc;
            app.Lamp.Color = [1 0 0];
            
            %patch(app.UIAxes_2, x, y, z, c);
%             
%             colormap(app.UIAxes_2, 'jet');
%             
%             hold(app.UIAxes_2, 'on');
%             set(app.UIAxes_2, 'View', [0 90]);
%             
%             %to set limit on color maps
% 
%             h_2 = colorbar(app.UIAxes_2);
%             t=get(h_2, 'Limits');
%             T1 = linspace(t(1), t(2), 5);
%             set(h_2, 'Ticks', T1);
%             TL = arrayfun(@(x) sprintf('%.2f', x), T1, 'un', 0);
%             set(h_2, 'TickLabels', TL);
            
        end

        % Selection changed function: ColorbarButtonGroup
        function ColorbarButtonGroupSelectionChanged(app, event)
            selectedButton = app.ColorbarButtonGroup.SelectedObject;
            switch app.ColorbarButtonGroup.SelectedObject.Icon
                case 'jet.png'
                    colormap(app.UIAxes_2, 'jet');
                case 'parula.png'
                    colormap(app.UIAxes_2, 'parula');
            end
        end

        % Value changed function: ElementType
        function ElementTypeValueChanged(app, event)
%             GenerateButtonPushed(app, event);
%             PlotButtonPushed(app, event);
        end

        % Selection changed function: DeformationTypeButtonGroup_2
        function DeformationTypeButtonGroup_2SelectionChanged(app, event)
            selectedButton = app.DeformationTypeButtonGroup_2.SelectedObject.Text;
            switch selectedButton
                case 'Horizontal'
                    app.Image.Enable = 'on';
                    app.Image_2.Enable = 'off';
                    app.Image_3.Enable = 'off';
                case 'Diagonal'
                    app.Image.Enable = 'off';
                    app.Image_2.Enable = 'on';
                    app.Image_3.Enable = 'off';
                case 'Vertical'
                    app.Image.Enable = 'off';
                    app.Image_2.Enable = 'off';
                    app.Image_3.Enable = 'on';
            end
        end

        % Value changed function: DropDown
        function DropDownValueChanged(app, event)
            app.plotType = app.DropDown.Value;
            
            %This prevents plot from updating if no values are calculated
            if (app.didPlotHappen) %refer to beginning plotting function
                app.UIAxes_2.cla;
                load('X_1.mat', 'X_1');
                load('Y_1.mat', 'Y_1');
                load('T.mat', 'T');
                load('flux_x.mat', 'flux_x');
                load('flux_y.mat', 'flux_y');
                plot_it(app, X_1, Y_1, T, flux_x, flux_y);
            end
        end

        % Button pushed function: ResetButton
        function ResetButtonPushed(app, event)
            app.UIAxes.cla;
        end

        % Button pushed function: ResetButton_2
        function ResetButton_2Pushed(app, event)
            app.UIAxes_3.cla;
        end

        % Button pushed function: ResetButton_3
        function ResetButton_3Pushed(app, event)
            app.UIAxes_2.cla;
        end

        % Callback function
        function TestButtonPushed(app, event)
            
        end

        % Value changed function: Switch
        function SwitchValueChanged(app, event)
            app.edgeSwitch = app.Switch.Value;
            
            if(app.didPlotHappen)
                load('X_1.mat', 'X_1');
                load('Y_1.mat', 'Y_1');
                load('T.mat', 'T');
                load('flux_x.mat', 'flux_x');
                load('flux_y.mat', 'flux_y');
                plot_it(app, X_1, Y_1, T, flux_x, flux_y);
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 864 635];
            app.UIFigure.Name = 'UI Figure';

            % Create aEditFieldLabel
            app.aEditFieldLabel = uilabel(app.UIFigure);
            app.aEditFieldLabel.HorizontalAlignment = 'right';
            app.aEditFieldLabel.Position = [157 587 25 22];
            app.aEditFieldLabel.Text = 'a';

            % Create a
            app.a = uieditfield(app.UIFigure, 'numeric');
            app.a.Position = [197 587 36 22];
            app.a.Value = 1;

            % Create bEditFieldLabel
            app.bEditFieldLabel = uilabel(app.UIFigure);
            app.bEditFieldLabel.HorizontalAlignment = 'right';
            app.bEditFieldLabel.Position = [157 560 25 22];
            app.bEditFieldLabel.Text = 'b';

            % Create b
            app.b = uieditfield(app.UIFigure, 'numeric');
            app.b.Position = [197 560 36 22];
            app.b.Value = 1;

            % Create cEditFieldLabel
            app.cEditFieldLabel = uilabel(app.UIFigure);
            app.cEditFieldLabel.HorizontalAlignment = 'right';
            app.cEditFieldLabel.Position = [157 533 25 22];
            app.cEditFieldLabel.Text = 'c';

            % Create c
            app.c = uieditfield(app.UIFigure, 'numeric');
            app.c.Position = [197 533 36 22];
            app.c.Value = 5;

            % Create dEditFieldLabel
            app.dEditFieldLabel = uilabel(app.UIFigure);
            app.dEditFieldLabel.HorizontalAlignment = 'right';
            app.dEditFieldLabel.Position = [157 506 25 22];
            app.dEditFieldLabel.Text = 'd';

            % Create d
            app.d = uieditfield(app.UIFigure, 'numeric');
            app.d.Position = [197 506 36 22];
            app.d.Value = 5;

            % Create ElementTypeDropDownLabel
            app.ElementTypeDropDownLabel = uilabel(app.UIFigure);
            app.ElementTypeDropDownLabel.HorizontalAlignment = 'right';
            app.ElementTypeDropDownLabel.Position = [271 548 79 22];
            app.ElementTypeDropDownLabel.Text = 'Element Type';

            % Create ElementType
            app.ElementType = uidropdown(app.UIFigure);
            app.ElementType.Items = {'2DTR3N', '2DQU4N'};
            app.ElementType.ValueChangedFcn = createCallbackFcn(app, @ElementTypeValueChanged, true);
            app.ElementType.Position = [271 519 82 22];
            app.ElementType.Value = '2DTR3N';

            % Create MeshCriteriaLabel
            app.MeshCriteriaLabel = uilabel(app.UIFigure);
            app.MeshCriteriaLabel.FontWeight = 'bold';
            app.MeshCriteriaLabel.Position = [50 598 81 22];
            app.MeshCriteriaLabel.Text = 'Mesh Criteria';

            % Create Button
            app.Button = uibutton(app.UIFigure, 'push');
            app.Button.Icon = 'circle.png';
            app.Button.Position = [48 504 104 87];
            app.Button.Text = '';

            % Create eEditFieldLabel
            app.eEditFieldLabel = uilabel(app.UIFigure);
            app.eEditFieldLabel.HorizontalAlignment = 'right';
            app.eEditFieldLabel.Position = [157 479 25 22];
            app.eEditFieldLabel.Text = 'e';

            % Create e
            app.e = uieditfield(app.UIFigure, 'numeric');
            app.e.Position = [197 479 36 22];
            app.e.Value = 0.2;

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            title(app.UIAxes, '')
            xlabel(app.UIAxes, '')
            ylabel(app.UIAxes, '')
            app.UIAxes.GridColor = [0 0 0];
            app.UIAxes.XColor = 'none';
            app.UIAxes.XTick = [];
            app.UIAxes.YColor = 'none';
            app.UIAxes.YTick = [];
            app.UIAxes.ZColor = 'none';
            app.UIAxes.Visible = 'off';
            app.UIAxes.Position = [497 449 150 150];

            % Create GenerateButton
            app.GenerateButton = uibutton(app.UIFigure, 'push');
            app.GenerateButton.ButtonPushedFcn = createCallbackFcn(app, @GenerateButtonPushed, true);
            app.GenerateButton.Position = [682 577 100 22];
            app.GenerateButton.Text = 'Generate';

            % Create ElementsEditFieldLabel
            app.ElementsEditFieldLabel = uilabel(app.UIFigure);
            app.ElementsEditFieldLabel.HorizontalAlignment = 'right';
            app.ElementsEditFieldLabel.Position = [682 477 62 22];
            app.ElementsEditFieldLabel.Text = '#Elements';

            % Create Elements
            app.Elements = uieditfield(app.UIFigure, 'numeric');
            app.Elements.Editable = 'off';
            app.Elements.Position = [682 455 100 23];

            % Create NodesEditField_2Label
            app.NodesEditField_2Label = uilabel(app.UIFigure);
            app.NodesEditField_2Label.HorizontalAlignment = 'right';
            app.NodesEditField_2Label.Position = [682 539 47 22];
            app.NodesEditField_2Label.Text = '#Nodes';

            % Create Nodes
            app.Nodes = uieditfield(app.UIFigure, 'numeric');
            app.Nodes.Editable = 'off';
            app.Nodes.Position = [682 519 100 21];

            % Create MeshRefinementSliderLabel
            app.MeshRefinementSliderLabel = uilabel(app.UIFigure);
            app.MeshRefinementSliderLabel.HorizontalAlignment = 'right';
            app.MeshRefinementSliderLabel.Position = [398 581 100 22];
            app.MeshRefinementSliderLabel.Text = 'Mesh Refinement';

            % Create MeshRefinementSlider
            app.MeshRefinementSlider = uislider(app.UIFigure);
            app.MeshRefinementSlider.Limits = [0 50];
            app.MeshRefinementSlider.Orientation = 'vertical';
            app.MeshRefinementSlider.ValueChangedFcn = createCallbackFcn(app, @MeshRefinementSliderValueChanged, true);
            app.MeshRefinementSlider.Position = [461 462 3 118];

            % Create UIAxes_2
            app.UIAxes_2 = uiaxes(app.UIFigure);
            title(app.UIAxes_2, '')
            xlabel(app.UIAxes_2, '')
            ylabel(app.UIAxes_2, '')
            app.UIAxes_2.GridColor = [0 0 0];
            app.UIAxes_2.XColor = 'none';
            app.UIAxes_2.XTick = [];
            app.UIAxes_2.YColor = 'none';
            app.UIAxes_2.YTick = [];
            app.UIAxes_2.ZColor = 'none';
            app.UIAxes_2.Visible = 'off';
            app.UIAxes_2.Position = [539 29 284 230];

            % Create Plot
            app.Plot = uibutton(app.UIFigure, 'push');
            app.Plot.ButtonPushedFcn = createCallbackFcn(app, @PlotButtonPushed, true);
            app.Plot.Position = [718 364 72 22];
            app.Plot.Text = 'Run';

            % Create ColorbarButtonGroup
            app.ColorbarButtonGroup = uibuttongroup(app.UIFigure);
            app.ColorbarButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @ColorbarButtonGroupSelectionChanged, true);
            app.ColorbarButtonGroup.TitlePosition = 'centertop';
            app.ColorbarButtonGroup.Title = 'Colorbar';
            app.ColorbarButtonGroup.Position = [378 145 122.992713928223 105.997970581055];

            % Create Button_2
            app.Button_2 = uitogglebutton(app.ColorbarButtonGroup);
            app.Button_2.Icon = 'jet.png';
            app.Button_2.Text = '';
            app.Button_2.BackgroundColor = [1 1 1];
            app.Button_2.Position = [7.5 13 32 62];
            app.Button_2.Value = true;

            % Create Button_3
            app.Button_3 = uitogglebutton(app.ColorbarButtonGroup);
            app.Button_3.Icon = 'parula.png';
            app.Button_3.Text = '';
            app.Button_3.Position = [83.5 13 32 62];

            % Create ConductivitykEditFieldLabel
            app.ConductivitykEditFieldLabel = uilabel(app.UIFigure);
            app.ConductivitykEditFieldLabel.HorizontalAlignment = 'right';
            app.ConductivitykEditFieldLabel.Position = [53 375 84 22];
            app.ConductivitykEditFieldLabel.Text = 'Conductivity (k)';

            % Create ConductivitykEditField
            app.ConductivitykEditField = uieditfield(app.UIFigure, 'numeric');
            app.ConductivitykEditField.Position = [53 354 76 22];
            app.ConductivitykEditField.Value = 100;

            % Create PreProcessLabel
            app.PreProcessLabel = uilabel(app.UIFigure);
            app.PreProcessLabel.FontSize = 14;
            app.PreProcessLabel.FontWeight = 'bold';
            app.PreProcessLabel.Position = [416 608 119 22];
            app.PreProcessLabel.Text = 'Pre-Process';

            % Create TemperatureMagnitudeEditFieldLabel
            app.TemperatureMagnitudeEditFieldLabel = uilabel(app.UIFigure);
            app.TemperatureMagnitudeEditFieldLabel.HorizontalAlignment = 'right';
            app.TemperatureMagnitudeEditFieldLabel.Position = [53 323 132 22];
            app.TemperatureMagnitudeEditFieldLabel.Text = 'Temperature Magnitude';

            % Create TemperatureMagnitudeEditField
            app.TemperatureMagnitudeEditField = uieditfield(app.UIFigure, 'numeric');
            app.TemperatureMagnitudeEditField.Position = [53 302 76 22];
            app.TemperatureMagnitudeEditField.Value = 100;

            % Create Lamp
            app.Lamp = uilamp(app.UIFigure);
            app.Lamp.Position = [743 334 20 20];
            app.Lamp.Color = [1 0 0];

            % Create UIAxes_3
            app.UIAxes_3 = uiaxes(app.UIFigure);
            title(app.UIAxes_3, '')
            xlabel(app.UIAxes_3, '')
            ylabel(app.UIAxes_3, '')
            app.UIAxes_3.GridColor = [0 0 0];
            app.UIAxes_3.XColor = 'none';
            app.UIAxes_3.XTick = [];
            app.UIAxes_3.YColor = 'none';
            app.UIAxes_3.YTick = [];
            app.UIAxes_3.ZColor = 'none';
            app.UIAxes_3.Visible = 'off';
            app.UIAxes_3.Position = [28 29 284 230];

            % Create PostProcessLabel
            app.PostProcessLabel = uilabel(app.UIFigure);
            app.PostProcessLabel.FontSize = 14;
            app.PostProcessLabel.FontWeight = 'bold';
            app.PostProcessLabel.Position = [403 250 119 22];
            app.PostProcessLabel.Text = 'Post-Process';

            % Create ProcessLabel
            app.ProcessLabel = uilabel(app.UIFigure);
            app.ProcessLabel.FontSize = 14;
            app.ProcessLabel.FontWeight = 'bold';
            app.ProcessLabel.Position = [421 407 119 22];
            app.ProcessLabel.Text = 'Process';

            % Create DeformationTypeButtonGroup_2
            app.DeformationTypeButtonGroup_2 = uibuttongroup(app.UIFigure);
            app.DeformationTypeButtonGroup_2.SelectionChangedFcn = createCallbackFcn(app, @DeformationTypeButtonGroup_2SelectionChanged, true);
            app.DeformationTypeButtonGroup_2.TitlePosition = 'centertop';
            app.DeformationTypeButtonGroup_2.Title = 'Deformation Type';
            app.DeformationTypeButtonGroup_2.Position = [246 279 411 118];

            % Create HorizontalButton
            app.HorizontalButton = uitogglebutton(app.DeformationTypeButtonGroup_2);
            app.HorizontalButton.Text = 'Horizontal';
            app.HorizontalButton.Position = [11 74 100 22];
            app.HorizontalButton.Value = true;

            % Create DiagonalButton
            app.DiagonalButton = uitogglebutton(app.DeformationTypeButtonGroup_2);
            app.DiagonalButton.Text = 'Diagonal';
            app.DiagonalButton.Position = [156 74 100 22];

            % Create VerticalButton
            app.VerticalButton = uitogglebutton(app.DeformationTypeButtonGroup_2);
            app.VerticalButton.Text = 'Vertical';
            app.VerticalButton.Position = [301 74 100 22];

            % Create Image
            app.Image = uiimage(app.DeformationTypeButtonGroup_2);
            app.Image.Position = [17 13 92 54];
            app.Image.ImageSource = 'Horizontal.PNG';

            % Create Image_2
            app.Image_2 = uiimage(app.DeformationTypeButtonGroup_2);
            app.Image_2.Enable = 'off';
            app.Image_2.Position = [160 12 92 54];
            app.Image_2.ImageSource = 'Diagonal.PNG';

            % Create Image_3
            app.Image_3 = uiimage(app.DeformationTypeButtonGroup_2);
            app.Image_3.Enable = 'off';
            app.Image_3.Position = [305 12 92 54];
            app.Image_3.ImageSource = 'Vertical.PNG';

            % Create DropDown
            app.DropDown = uidropdown(app.UIFigure);
            app.DropDown.Items = {'Temperature', 'Flux X', 'Flux Y'};
            app.DropDown.ValueChangedFcn = createCallbackFcn(app, @DropDownValueChanged, true);
            app.DropDown.Position = [386 113 100 22];
            app.DropDown.Value = 'Temperature';

            % Create ComputationTimesEditFieldLabel
            app.ComputationTimesEditFieldLabel = uilabel(app.UIFigure);
            app.ComputationTimesEditFieldLabel.HorizontalAlignment = 'center';
            app.ComputationTimesEditFieldLabel.Position = [718 302 117 22];
            app.ComputationTimesEditFieldLabel.Text = 'Computation Time (s)';

            % Create ComputationTimesEditField
            app.ComputationTimesEditField = uieditfield(app.UIFigure, 'numeric');
            app.ComputationTimesEditField.Editable = 'off';
            app.ComputationTimesEditField.Position = [741 274 62 22];

            % Create ResetButton
            app.ResetButton = uibutton(app.UIFigure, 'push');
            app.ResetButton.ButtonPushedFcn = createCallbackFcn(app, @ResetButtonPushed, true);
            app.ResetButton.Position = [521 428 100 22];
            app.ResetButton.Text = 'Reset';

            % Create ResetButton_2
            app.ResetButton_2 = uibutton(app.UIFigure, 'push');
            app.ResetButton_2.ButtonPushedFcn = createCallbackFcn(app, @ResetButton_2Pushed, true);
            app.ResetButton_2.Position = [104 8 100 22];
            app.ResetButton_2.Text = 'Reset';

            % Create ResetButton_3
            app.ResetButton_3 = uibutton(app.UIFigure, 'push');
            app.ResetButton_3.ButtonPushedFcn = createCallbackFcn(app, @ResetButton_3Pushed, true);
            app.ResetButton_3.Position = [631 8 100 22];
            app.ResetButton_3.Text = 'Reset';

            % Create EdgeDisplaySwitchLabel
            app.EdgeDisplaySwitchLabel = uilabel(app.UIFigure);
            app.EdgeDisplaySwitchLabel.HorizontalAlignment = 'center';
            app.EdgeDisplaySwitchLabel.Position = [402.5 29 76 22];
            app.EdgeDisplaySwitchLabel.Text = 'Edge Display';

            % Create Switch
            app.Switch = uiswitch(app.UIFigure, 'slider');
            app.Switch.ItemsData = {'0', '1'};
            app.Switch.ValueChangedFcn = createCallbackFcn(app, @SwitchValueChanged, true);
            app.Switch.Position = [417 66 45 20];
            app.Switch.Value = '0';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = FEMGui_2

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
